<?xml version="1.0"?>
<!-- NOTE: this template has been modified
The main structure has been conserved,
nevertheless flashrc, niu and pcie have been
omitted -->
<component id="root" name="root">
  <component id="system" name="system">
    <!--McPAT will skip the components if number is set to 0 -->
    <param name="number_cache_levels" value="2"/>
    <param name="number_of_cores" value="64"/>
    <param name="number_of_L1Directories" value="1"/>
    <param name="number_of_L2Directories" value="0"/>
    <param name="number_of_L2s" value="0"/>
    <!-- This number means how many L2 clusters in each cluster there can be multiple banks/ports -->
    <param name="Private_L2" value="0"/>
    <!--1 Private, 0 shared/coherent -->
    <param name="number_of_L3s" value="0"/>
    <!-- This number means how many L3 clusters -->
    <param name="number_of_NoCs" value="0"/>
    <param name="homogeneous_cores" value="0"/>
    <!--1 means homo -->
    <param name="homogeneous_L2s" value="1"/>
    <param name="homogeneous_L1Directories" value="1"/>
    <param name="homogeneous_L2Directories" value="1"/>
    <param name="homogeneous_L3s" value="0"/>
    <param name="homogeneous_ccs" value="1"/>
    <!--cache coherence hardware -->
    <param name="homogeneous_NoCs" value="1"/>
    <param name="core_tech_node" value="28"/>
    <!-- nm -->
    <param name="target_core_clockrate" value="1000"/>
    <!--MHz -->
    <param name="temperature" value="380"/>
    <!-- Kelvin -->
    <param name="interconnect_projection_type" value="0"/>
    <!--0: aggressive wire technology; 1: conservative wire technology -->
    <param name="device_type" value="2"/>
    <!--0: HP(High Performance Type); 1: LSTP(Low standby power) 2: LOP (Low Operating Power)  -->
    <param name="longer_channel_device" value="1"/>
    <!-- 0 no use; 1 use when aggressive -->
    <param name="Embedded" value="0"/><!-- Embedded processor like ARM or general purpose processors?  -->
    <param name="power_gating" value="1"/>
    <!-- 0 not enabled; 1 enabled -->
    <param name="machine_bits" value="64"/>
    <param name="virtual_address_width" value="64"/>
    <param name="physical_address_width" value="52"/>
    <param name="virtual_memory_page_size" value="4096"/>
    <!-- address width determines the tag_width in Cache, LSQ and buffers in cache controller
	 default value is machine_bits, if not set -->
    <stat name="total_cycles" value="15197314"/>
    <stat name="idle_cycles" value="0"/>
    <stat name="busy_cycles" value="15197314"/>
    <!--This page size(B) is complete different from the page size in Main memo section. this page size is the size of
	virtual memory from OS/Archi perspective; the page size in Main memo section is the actual physical line in a DRAM bank  -->
    <!-- *********************** cores ******************* -->
    <component id="system.cpu0" name="core0">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="0"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="8578975"/>
      <stat name="int_instructions" value="1375406"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="834579"/>
      <stat name="branch_mispredictions" value="2143"/>
      <stat name="load_instructions" value="4176032"/>
      <stat name="store_instructions" value="3606528"/>
      <stat name="committed_instructions" value="7648368"/>
      <stat name="committed_int_instructions" value="1375406"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.503271038553"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="1375406"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="1375406"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="7415789"/>
      <stat name="float_regfile_reads" value="7221724"/>
      <stat name="int_regfile_writes" value="1284825"/>
      <stat name="float_regfile_writes" value="3903321"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="1347465"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="27941"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu0.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu0.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu0.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="65536, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="758467"/>
        <stat name="read_misses" value="104"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu0.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu0.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="65536, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="4323838"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="56594"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu0.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu1" name="core1">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="0"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="6545572"/>
      <stat name="int_instructions" value="1202401"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="875047"/>
      <stat name="branch_mispredictions" value="1683"/>
      <stat name="load_instructions" value="2941504"/>
      <stat name="store_instructions" value="2566400"/>
      <stat name="committed_instructions" value="5822098"/>
      <stat name="committed_int_instructions" value="1202401"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.383100461042"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="1202401"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="1202401"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="5726372"/>
      <stat name="float_regfile_reads" value="5133909"/>
      <stat name="int_regfile_writes" value="1134693"/>
      <stat name="float_regfile_writes" value="2757963"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="1164838"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="37563"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu1.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu1.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu1.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="65536, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="555129"/>
        <stat name="read_misses" value="94"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu1.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu1.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="65536, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3140922"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="51574"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu1.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu2" name="core2">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="0"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="6150060"/>
      <stat name="int_instructions" value="1140606"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="915648"/>
      <stat name="branch_mispredictions" value="1296"/>
      <stat name="load_instructions" value="2688352"/>
      <stat name="store_instructions" value="2373120"/>
      <stat name="committed_instructions" value="5453688"/>
      <stat name="committed_int_instructions" value="1140606"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.358858677264"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="1140606"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="1140606"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="5367185"/>
      <stat name="float_regfile_reads" value="4748371"/>
      <stat name="int_regfile_writes" value="1095199"/>
      <stat name="float_regfile_writes" value="2533396"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="1099577"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="41029"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu2.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu2.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu2.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="65536, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="549511"/>
        <stat name="read_misses" value="95"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu2.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu2.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="65536, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="2920312"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="52527"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu2.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu3" name="core3">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="0"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="6252256"/>
      <stat name="int_instructions" value="1201368"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="925325"/>
      <stat name="branch_mispredictions" value="1171"/>
      <stat name="load_instructions" value="2748864"/>
      <stat name="store_instructions" value="2400256"/>
      <stat name="committed_instructions" value="5556263"/>
      <stat name="committed_int_instructions" value="1201368"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.365608225243"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="1201368"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="1201368"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="5496751"/>
      <stat name="float_regfile_reads" value="4800268"/>
      <stat name="int_regfile_writes" value="1137519"/>
      <stat name="float_regfile_writes" value="2577074"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="1160855"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="40513"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu3.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu3.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu3.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="65536, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="555305"/>
        <stat name="read_misses" value="94"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu3.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu3.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="65536, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="2952713"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="51603"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu3.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu4" name="core4">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3384575"/>
      <stat name="int_instructions" value="761181"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1635136"/>
      <stat name="store_instructions" value="1418752"/>
      <stat name="committed_instructions" value="3383912"/>
      <stat name="committed_int_instructions" value="761181"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.222665752117"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197272"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197272"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="761181"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="761181"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="738705"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22476"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu4.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu4.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu4.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3993036"/>
        <stat name="read_misses" value="322"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu4.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu4.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1902179"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="48329"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu4.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu5" name="core5">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3429586"/>
      <stat name="int_instructions" value="787086"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1660448"/>
      <stat name="store_instructions" value="1426432"/>
      <stat name="committed_instructions" value="3428927"/>
      <stat name="committed_int_instructions" value="787086"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.225627262407"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197308"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197308"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="787086"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="787086"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="765275"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21811"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu5.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu5.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu5.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="4046581"/>
        <stat name="read_misses" value="449"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu5.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu5.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1917759"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="48469"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu5.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu6" name="core6">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3437653"/>
      <stat name="int_instructions" value="785286"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1643936"/>
      <stat name="store_instructions" value="1423616"/>
      <stat name="committed_instructions" value="3436914"/>
      <stat name="committed_int_instructions" value="785286"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.226155673221"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197116"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197116"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="785286"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="785286"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="763025"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22261"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu6.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu6.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu6.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="4057389"/>
        <stat name="read_misses" value="453"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu6.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu6.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1928730"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="49096"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu6.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu7" name="core7">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3492692"/>
      <stat name="int_instructions" value="781485"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1681120"/>
      <stat name="store_instructions" value="1459200"/>
      <stat name="committed_instructions" value="3492027"/>
      <stat name="committed_int_instructions" value="781485"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.229780508012"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197229"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197229"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="781485"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="781485"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="760004"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21481"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu7.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu7.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu7.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="4119888"/>
        <stat name="read_misses" value="354"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu7.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu7.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1970234"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="48954"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu7.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu8" name="core8">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3235656"/>
      <stat name="int_instructions" value="763100"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1515136"/>
      <stat name="store_instructions" value="1311232"/>
      <stat name="committed_instructions" value="3235062"/>
      <stat name="committed_int_instructions" value="763100"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.212873486283"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197111"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197111"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="763100"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="763100"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="740909"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22191"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu8.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu8.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu8.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3824406"/>
        <stat name="read_misses" value="349"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu8.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu8.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1805287"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="45098"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu8.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu9" name="core9">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3300698"/>
      <stat name="int_instructions" value="709540"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1609632"/>
      <stat name="store_instructions" value="1410048"/>
      <stat name="committed_instructions" value="3300026"/>
      <stat name="committed_int_instructions" value="709540"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.217148074672"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197123"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197123"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="709540"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="709540"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="687680"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21860"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu9.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu9.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu9.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3888524"/>
        <stat name="read_misses" value="291"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu9.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu9.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1874530"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="48138"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu9.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu10" name="core10">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3414716"/>
      <stat name="int_instructions" value="789363"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1642912"/>
      <stat name="store_instructions" value="1415936"/>
      <stat name="committed_instructions" value="3413954"/>
      <stat name="committed_int_instructions" value="789363"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.224643189887"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197229"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197229"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="789363"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="789363"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="766354"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="23009"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu10.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu10.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu10.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="4032857"/>
        <stat name="read_misses" value="431"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu10.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu10.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1905159"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="48450"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu10.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu11" name="core11">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3390173"/>
      <stat name="int_instructions" value="785162"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1641472"/>
      <stat name="store_instructions" value="1404928"/>
      <stat name="committed_instructions" value="3389381"/>
      <stat name="committed_int_instructions" value="785162"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.223026558563"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197208"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197208"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="785162"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="785162"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="763459"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21703"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu11.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu11.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu11.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3999070"/>
        <stat name="read_misses" value="526"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu11.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu11.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1890983"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="50621"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu11.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu12" name="core12">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3175704"/>
      <stat name="int_instructions" value="713494"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1517280"/>
      <stat name="store_instructions" value="1327104"/>
      <stat name="committed_instructions" value="3175094"/>
      <stat name="committed_int_instructions" value="713494"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.208924682348"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="713494"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="713494"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="689727"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="23767"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu12.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu12.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu12.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3746878"/>
        <stat name="read_misses" value="292"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu12.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu12.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1786211"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="46481"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu12.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu13" name="core13">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3201381"/>
      <stat name="int_instructions" value="719571"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1526592"/>
      <stat name="store_instructions" value="1335808"/>
      <stat name="committed_instructions" value="3200798"/>
      <stat name="committed_int_instructions" value="719571"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.210617281156"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197224"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197224"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="719571"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="719571"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="696038"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="23533"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu13.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu13.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu13.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3777726"/>
        <stat name="read_misses" value="273"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu13.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu13.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1801622"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="46418"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu13.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu14" name="core14">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3296051"/>
      <stat name="int_instructions" value="689102"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1611072"/>
      <stat name="store_instructions" value="1421056"/>
      <stat name="committed_instructions" value="3295413"/>
      <stat name="committed_int_instructions" value="689102"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.216847484055"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15196916"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15196916"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="689102"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="689102"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="666676"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22426"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu14.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu14.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu14.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3878408"/>
        <stat name="read_misses" value="237"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu14.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu14.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1884601"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="48331"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu14.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu15" name="core15">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3214634"/>
      <stat name="int_instructions" value="739983"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1508064"/>
      <stat name="store_instructions" value="1318912"/>
      <stat name="committed_instructions" value="3214037"/>
      <stat name="committed_int_instructions" value="739983"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.211487174642"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="739983"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="739983"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="716583"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="23400"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu15.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu15.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu15.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3798287"/>
        <stat name="read_misses" value="234"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu15.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu15.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1802947"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="46490"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu15.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu16" name="core16">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3708539"/>
      <stat name="int_instructions" value="802047"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1878560"/>
      <stat name="store_instructions" value="1600000"/>
      <stat name="committed_instructions" value="3707669"/>
      <stat name="committed_int_instructions" value="802047"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.243972396283"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197084"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197084"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="802047"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="802047"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="783762"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="18285"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu16.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu16.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu16.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="4360051"/>
        <stat name="read_misses" value="601"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu16.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu16.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="2096492"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="52734"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu16.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu17" name="core17">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3030332"/>
      <stat name="int_instructions" value="671973"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1444672"/>
      <stat name="store_instructions" value="1269760"/>
      <stat name="committed_instructions" value="3029760"/>
      <stat name="committed_int_instructions" value="671973"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.199363302929"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197180"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197180"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="671973"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="671973"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="649358"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22615"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu17.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu17.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu17.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3574106"/>
        <stat name="read_misses" value="250"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu17.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu17.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1711660"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="44511"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu17.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu18" name="core18">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3133326"/>
      <stat name="int_instructions" value="686002"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1526592"/>
      <stat name="store_instructions" value="1335808"/>
      <stat name="committed_instructions" value="3132765"/>
      <stat name="committed_int_instructions" value="686002"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.206139631682"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197296"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197296"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="686002"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="686002"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="663256"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22746"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu18.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu18.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu18.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3695185"/>
        <stat name="read_misses" value="204"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu18.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu18.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1767527"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="45903"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu18.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu19" name="core19">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3313610"/>
      <stat name="int_instructions" value="694524"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1644896"/>
      <stat name="store_instructions" value="1432064"/>
      <stat name="committed_instructions" value="3312892"/>
      <stat name="committed_int_instructions" value="694524"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.217995686401"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197053"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197053"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="694524"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="694524"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="673179"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21345"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu19.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu19.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu19.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3891616"/>
        <stat name="read_misses" value="432"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu19.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu19.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1891723"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="48144"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu19.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu20" name="core20">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3142171"/>
      <stat name="int_instructions" value="696808"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1525664"/>
      <stat name="store_instructions" value="1328640"/>
      <stat name="committed_instructions" value="3141547"/>
      <stat name="committed_int_instructions" value="696808"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.206722190524"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15196951"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15196951"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="696808"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="696808"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="674280"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22528"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu20.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu20.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu20.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3703499"/>
        <stat name="read_misses" value="342"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu20.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu20.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1769241"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="46381"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu20.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu21" name="core21">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3121478"/>
      <stat name="int_instructions" value="652153"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1537056"/>
      <stat name="store_instructions" value="1353984"/>
      <stat name="committed_instructions" value="3120886"/>
      <stat name="committed_int_instructions" value="652153"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.205359330761"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197196"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197196"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="652153"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="652153"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="629841"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22312"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu21.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu21.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu21.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3673119"/>
        <stat name="read_misses" value="239"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu21.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu21.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1780618"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="45905"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu21.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu22" name="core22">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3329862"/>
      <stat name="int_instructions" value="751227"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1633312"/>
      <stat name="store_instructions" value="1405696"/>
      <stat name="committed_instructions" value="3329290"/>
      <stat name="committed_int_instructions" value="751227"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.219074855549"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197043"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197043"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="751227"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="751227"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="729694"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21533"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu22.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu22.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu22.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3927785"/>
        <stat name="read_misses" value="342"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu22.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu22.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1864477"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="46845"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu22.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu23" name="core23">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3192964"/>
      <stat name="int_instructions" value="749748"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1505824"/>
      <stat name="store_instructions" value="1302528"/>
      <stat name="committed_instructions" value="3192409"/>
      <stat name="committed_int_instructions" value="749748"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.210065161866"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197232"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197232"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="749748"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="749748"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="727295"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22453"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu23.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu23.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu23.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3773389"/>
        <stat name="read_misses" value="353"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu23.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu23.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1780214"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="44725"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu23.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu24" name="core24">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3080360"/>
      <stat name="int_instructions" value="651036"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1508800"/>
      <stat name="store_instructions" value="1325056"/>
      <stat name="committed_instructions" value="3079768"/>
      <stat name="committed_int_instructions" value="651036"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.202654260133"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197154"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197154"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="651036"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="651036"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="630266"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20770"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu24.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu24.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu24.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3626167"/>
        <stat name="read_misses" value="209"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu24.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu24.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1755855"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="44352"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu24.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu25" name="core25">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3322082"/>
      <stat name="int_instructions" value="709279"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1661856"/>
      <stat name="store_instructions" value="1436160"/>
      <stat name="committed_instructions" value="3321345"/>
      <stat name="committed_int_instructions" value="709279"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.218549654838"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197210"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197210"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="709279"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="709279"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="689744"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="19535"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu25.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu25.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu25.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3907020"/>
        <stat name="read_misses" value="469"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu25.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu25.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1884243"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="48313"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu25.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu26" name="core26">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3260498"/>
      <stat name="int_instructions" value="738759"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1596128"/>
      <stat name="store_instructions" value="1370112"/>
      <stat name="committed_instructions" value="3259823"/>
      <stat name="committed_int_instructions" value="738759"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.214500734277"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197258"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197258"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="738759"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="738759"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="717734"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21025"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu26.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu26.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu26.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3842849"/>
        <stat name="read_misses" value="446"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu26.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu26.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1825566"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="46648"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu26.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu27" name="core27">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3059905"/>
      <stat name="int_instructions" value="605367"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1529568"/>
      <stat name="store_instructions" value="1358336"/>
      <stat name="committed_instructions" value="3059272"/>
      <stat name="committed_int_instructions" value="605367"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.201303970527"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197276"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197276"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="605367"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="605367"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="583383"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21984"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu27.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu27.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu27.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3593289"/>
        <stat name="read_misses" value="201"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu27.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu27.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1763780"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="47231"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu27.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu28" name="core28">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3048170"/>
      <stat name="int_instructions" value="637414"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1499968"/>
      <stat name="store_instructions" value="1318912"/>
      <stat name="committed_instructions" value="3047511"/>
      <stat name="committed_int_instructions" value="637414"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.200529580425"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="637414"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="637414"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="615653"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21761"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu28.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu28.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu28.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3583106"/>
        <stat name="read_misses" value="329"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu28.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu28.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1739783"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="45881"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu28.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu29" name="core29">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2954319"/>
      <stat name="int_instructions" value="656473"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1417120"/>
      <stat name="store_instructions" value="1245696"/>
      <stat name="committed_instructions" value="2953749"/>
      <stat name="committed_int_instructions" value="656473"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.194361344363"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197204"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197204"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="656473"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="656473"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="633309"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="23164"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu29.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu29.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu29.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3485951"/>
        <stat name="read_misses" value="224"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu29.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu29.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1662912"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43999"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu29.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu30" name="core30">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2989048"/>
      <stat name="int_instructions" value="707287"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1379744"/>
      <stat name="store_instructions" value="1209088"/>
      <stat name="committed_instructions" value="2988433"/>
      <stat name="committed_int_instructions" value="707287"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.19664347689"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197214"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197214"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="707287"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="707287"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="682745"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="24542"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu30.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu30.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu30.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3535713"/>
        <stat name="read_misses" value="297"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu30.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu30.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1664397"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43972"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu30.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu31" name="core31">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3307545"/>
      <stat name="int_instructions" value="796110"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1567232"/>
      <stat name="store_instructions" value="1335552"/>
      <stat name="committed_instructions" value="3306799"/>
      <stat name="committed_int_instructions" value="796110"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.217594137722"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197096"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197096"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="796110"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="796110"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="774867"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21243"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu31.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu31.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu31.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3908268"/>
        <stat name="read_misses" value="538"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu31.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu31.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1832347"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="48433"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu31.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu32" name="core32">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2828758"/>
      <stat name="int_instructions" value="658531"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1306432"/>
      <stat name="store_instructions" value="1146880"/>
      <stat name="committed_instructions" value="2828272"/>
      <stat name="committed_int_instructions" value="658531"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.186104453647"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197229"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197229"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="658531"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="658531"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="636458"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22073"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu32.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu32.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu32.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3342613"/>
        <stat name="read_misses" value="252"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu32.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu32.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1585337"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="40906"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu32.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu33" name="core33">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2848519"/>
      <stat name="int_instructions" value="641290"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1352512"/>
      <stat name="store_instructions" value="1187840"/>
      <stat name="committed_instructions" value="2848005"/>
      <stat name="committed_int_instructions" value="641290"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.187401865882"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="641290"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="641290"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="619320"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21970"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu33.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu33.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu33.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3362667"/>
        <stat name="read_misses" value="196"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu33.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu33.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1601850"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="41713"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu33.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu34" name="core34">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3111182"/>
      <stat name="int_instructions" value="663677"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1534880"/>
      <stat name="store_instructions" value="1336832"/>
      <stat name="committed_instructions" value="3110403"/>
      <stat name="committed_int_instructions" value="663677"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.204667943296"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="663677"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="663677"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="643118"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20559"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu34.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu34.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu34.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3658029"/>
        <stat name="read_misses" value="378"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu34.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu34.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1768125"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="46386"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu34.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu35" name="core35">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2900517"/>
      <stat name="int_instructions" value="639482"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1398592"/>
      <stat name="store_instructions" value="1228800"/>
      <stat name="committed_instructions" value="2899947"/>
      <stat name="committed_int_instructions" value="639482"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.190824465591"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15196935"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15196935"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="639482"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="639482"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="616866"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22616"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu35.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu35.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu35.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3420788"/>
        <stat name="read_misses" value="219"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu35.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu35.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1634821"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43204"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu35.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu36" name="core36">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2988382"/>
      <stat name="int_instructions" value="642991"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1453888"/>
      <stat name="store_instructions" value="1277952"/>
      <stat name="committed_instructions" value="2987749"/>
      <stat name="committed_int_instructions" value="642991"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.196599438881"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197139"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197139"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="642991"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="642991"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="620663"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22328"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu36.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu36.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu36.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3519109"/>
        <stat name="read_misses" value="261"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu36.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu36.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1694675"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="44880"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu36.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu37" name="core37">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3355065"/>
      <stat name="int_instructions" value="727449"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1679104"/>
      <stat name="store_instructions" value="1445120"/>
      <stat name="committed_instructions" value="3354305"/>
      <stat name="committed_int_instructions" value="727449"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.220722046851"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15196964"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15196964"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="727449"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="727449"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="706892"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20557"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu37.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu37.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu37.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3948542"/>
        <stat name="read_misses" value="432"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu37.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu37.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1894082"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="47767"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu37.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu38" name="core38">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3413410"/>
      <stat name="int_instructions" value="803482"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1683776"/>
      <stat name="store_instructions" value="1417984"/>
      <stat name="committed_instructions" value="3412736"/>
      <stat name="committed_int_instructions" value="803482"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.224561994565"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197300"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197300"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="803482"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="803482"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="784530"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="18952"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu38.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu38.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu38.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="4026993"/>
        <stat name="read_misses" value="522"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu38.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu38.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1890839"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="47674"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu38.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu39" name="core39">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3469112"/>
      <stat name="int_instructions" value="705331"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1745152"/>
      <stat name="store_instructions" value="1513984"/>
      <stat name="committed_instructions" value="3468231"/>
      <stat name="committed_int_instructions" value="705331"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.228214801363"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197222"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197222"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="705331"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="705331"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="686625"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="18706"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu39.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu39.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu39.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="4067486"/>
        <stat name="read_misses" value="466"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu39.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu39.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1996584"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="50111"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu39.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu40" name="core40">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2993762"/>
      <stat name="int_instructions" value="665807"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1434144"/>
      <stat name="store_instructions" value="1252352"/>
      <stat name="committed_instructions" value="2993182"/>
      <stat name="committed_int_instructions" value="665807"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.196956020217"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197210"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197210"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="665807"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="665807"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="645273"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20534"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu40.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu40.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu40.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3530131"/>
        <stat name="read_misses" value="325"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu40.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu40.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1690958"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="42966"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu40.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu41" name="core41">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2993117"/>
      <stat name="int_instructions" value="645393"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1462080"/>
      <stat name="store_instructions" value="1278464"/>
      <stat name="committed_instructions" value="2992532"/>
      <stat name="committed_int_instructions" value="645393"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.19691375454"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197171"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197171"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="645393"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="645393"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="625012"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20381"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu41.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu41.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu41.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3524328"/>
        <stat name="read_misses" value="283"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu41.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu41.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1697767"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="44182"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu41.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu42" name="core42">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2858601"/>
      <stat name="int_instructions" value="634560"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1361920"/>
      <stat name="store_instructions" value="1197056"/>
      <stat name="committed_instructions" value="2857978"/>
      <stat name="committed_int_instructions" value="634560"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.188059919326"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197167"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197167"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="634560"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="634560"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="612769"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21791"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu42.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu42.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu42.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3370161"/>
        <stat name="read_misses" value="278"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu42.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu42.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1614063"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43050"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu42.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu43" name="core43">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2958655"/>
      <stat name="int_instructions" value="672370"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1414784"/>
      <stat name="store_instructions" value="1228800"/>
      <stat name="committed_instructions" value="2958020"/>
      <stat name="committed_int_instructions" value="672370"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.194642690289"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197180"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197180"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="672370"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="672370"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="650658"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21712"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu43.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu43.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu43.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3488263"/>
        <stat name="read_misses" value="414"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu43.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu43.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1660473"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="44713"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu43.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu44" name="core44">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3046040"/>
      <stat name="int_instructions" value="664195"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1497920"/>
      <stat name="store_instructions" value="1303552"/>
      <stat name="committed_instructions" value="3045480"/>
      <stat name="committed_int_instructions" value="664195"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.200399406437"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197051"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197051"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="664195"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="664195"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="643116"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21079"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu44.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu44.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu44.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3588427"/>
        <stat name="read_misses" value="328"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu44.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu44.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1718973"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="44621"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu44.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu45" name="core45">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2947497"/>
      <stat name="int_instructions" value="660571"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1398400"/>
      <stat name="store_instructions" value="1227776"/>
      <stat name="committed_instructions" value="2946873"/>
      <stat name="committed_int_instructions" value="660571"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.19390930102"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197172"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197172"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="660571"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="660571"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="637652"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22919"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu45.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu45.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu45.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3476532"/>
        <stat name="read_misses" value="298"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu45.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu45.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1661024"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43530"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu45.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu46" name="core46">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3147379"/>
      <stat name="int_instructions" value="634132"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1572832"/>
      <stat name="store_instructions" value="1379840"/>
      <stat name="committed_instructions" value="3146735"/>
      <stat name="committed_int_instructions" value="634132"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.207063479415"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15196958"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15196958"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="634132"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="634132"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="614079"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20053"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu46.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu46.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu46.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3692566"/>
        <stat name="read_misses" value="318"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu46.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu46.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1812706"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="45340"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu46.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu47" name="core47">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2925642"/>
      <stat name="int_instructions" value="660306"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1362944"/>
      <stat name="store_instructions" value="1204736"/>
      <stat name="committed_instructions" value="2925029"/>
      <stat name="committed_int_instructions" value="660306"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.192470129919"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="660306"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="660306"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="637747"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22559"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu47.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu47.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu47.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3454601"/>
        <stat name="read_misses" value="184"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu47.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu47.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1651170"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43656"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu47.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu48" name="core48">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3099774"/>
      <stat name="int_instructions" value="663880"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1524192"/>
      <stat name="store_instructions" value="1319680"/>
      <stat name="committed_instructions" value="3099160"/>
      <stat name="committed_int_instructions" value="663880"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.203928718518"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197271"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197271"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="663880"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="663880"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="645836"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="18044"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu48.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu48.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu48.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3643425"/>
        <stat name="read_misses" value="319"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu48.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu48.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1766463"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="42817"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu48.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu49" name="core49">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2946495"/>
      <stat name="int_instructions" value="673660"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1405952"/>
      <stat name="store_instructions" value="1222656"/>
      <stat name="committed_instructions" value="2945933"/>
      <stat name="committed_int_instructions" value="673660"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.193847447407"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197172"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197172"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="673660"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="673660"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="653079"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20581"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu49.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu49.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu49.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3479850"/>
        <stat name="read_misses" value="260"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu49.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu49.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1650690"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="42239"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu49.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu50" name="core50">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2938916"/>
      <stat name="int_instructions" value="610388"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1436192"/>
      <stat name="store_instructions" value="1267712"/>
      <stat name="committed_instructions" value="2938274"/>
      <stat name="committed_int_instructions" value="610388"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.193344438964"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197096"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197096"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="610388"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="610388"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="589726"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20662"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu50.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu50.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu50.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3455043"/>
        <stat name="read_misses" value="247"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu50.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu50.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1683760"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43447"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu50.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu51" name="core51">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2952725"/>
      <stat name="int_instructions" value="646605"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1434432"/>
      <stat name="store_instructions" value="1253888"/>
      <stat name="committed_instructions" value="2952153"/>
      <stat name="committed_int_instructions" value="646605"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.194255519759"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197267"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197267"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="646605"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="646605"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="625826"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20779"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu51.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu51.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu51.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3480671"/>
        <stat name="read_misses" value="271"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu51.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu51.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1668253"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43011"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu51.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu52" name="core52">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3132109"/>
      <stat name="int_instructions" value="701776"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1550144"/>
      <stat name="store_instructions" value="1329664"/>
      <stat name="committed_instructions" value="3131441"/>
      <stat name="committed_int_instructions" value="701776"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.206054110836"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197178"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197178"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="701776"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="701776"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="682431"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="19345"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu52.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu52.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu52.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3691229"/>
        <stat name="read_misses" value="445"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu52.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu52.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1755199"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="44927"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu52.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu53" name="core53">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3004994"/>
      <stat name="int_instructions" value="664510"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1452672"/>
      <stat name="store_instructions" value="1269248"/>
      <stat name="committed_instructions" value="3004441"/>
      <stat name="committed_int_instructions" value="664510"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.197695878218"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197287"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197287"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="664510"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="664510"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="642896"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21614"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu53.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu53.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu53.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3543186"/>
        <stat name="read_misses" value="255"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu53.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu53.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1694542"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43569"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu53.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu54" name="core54">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2961579"/>
      <stat name="int_instructions" value="680297"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1397472"/>
      <stat name="store_instructions" value="1220608"/>
      <stat name="committed_instructions" value="2961024"/>
      <stat name="committed_int_instructions" value="680297"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.194840563674"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197164"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197164"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="680297"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="680297"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="658288"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="22009"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu54.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu54.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu54.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3498406"/>
        <stat name="read_misses" value="290"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu54.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu54.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1659473"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="42498"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu54.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu55" name="core55">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2890645"/>
      <stat name="int_instructions" value="658682"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1352320"/>
      <stat name="store_instructions" value="1186816"/>
      <stat name="committed_instructions" value="2890115"/>
      <stat name="committed_int_instructions" value="658682"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.190175490776"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197095"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197095"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="658682"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="658682"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="637450"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21232"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu55.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu55.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu55.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3413455"/>
        <stat name="read_misses" value="228"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu55.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu55.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1627448"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="41235"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu55.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu56" name="core56">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2789702"/>
      <stat name="int_instructions" value="659320"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1269376"/>
      <stat name="store_instructions" value="1113088"/>
      <stat name="committed_instructions" value="2789193"/>
      <stat name="committed_int_instructions" value="659320"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.183533324095"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197202"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197202"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="659320"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="659320"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="638493"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20827"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu56.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu56.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu56.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3298521"/>
        <stat name="read_misses" value="249"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu56.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu56.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1562983"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="39192"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu56.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu57" name="core57">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2750571"/>
      <stat name="int_instructions" value="611645"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1271808"/>
      <stat name="store_instructions" value="1130496"/>
      <stat name="committed_instructions" value="2749984"/>
      <stat name="committed_int_instructions" value="611645"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.180954167004"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197130"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197130"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="611645"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="611645"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="590764"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20881"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu57.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu57.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu57.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3244052"/>
        <stat name="read_misses" value="257"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu57.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu57.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1562705"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="41258"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu57.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu58" name="core58">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2905088"/>
      <stat name="int_instructions" value="648432"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1388064"/>
      <stat name="store_instructions" value="1211392"/>
      <stat name="committed_instructions" value="2904531"/>
      <stat name="committed_int_instructions" value="648432"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.191121338942"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197314"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197314"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="648432"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="648432"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="628280"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20152"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu58.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu58.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu58.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3424420"/>
        <stat name="read_misses" value="305"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu58.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu58.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1640392"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="41459"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu58.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu59" name="core59">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3056486"/>
      <stat name="int_instructions" value="683999"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1487200"/>
      <stat name="store_instructions" value="1285120"/>
      <stat name="committed_instructions" value="3055917"/>
      <stat name="committed_int_instructions" value="683999"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.201085231724"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197123"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197123"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="683999"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="683999"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="664385"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="19614"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu59.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu59.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu59.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3603519"/>
        <stat name="read_misses" value="285"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu59.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu59.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1719611"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43381"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu59.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu60" name="core60">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="3033063"/>
      <stat name="int_instructions" value="677813"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1469568"/>
      <stat name="store_instructions" value="1274112"/>
      <stat name="committed_instructions" value="3032461"/>
      <stat name="committed_int_instructions" value="677813"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.199539654616"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197285"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197285"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="677813"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="677813"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="657843"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="19970"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu60.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu60.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu60.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3576128"/>
        <stat name="read_misses" value="300"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu60.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu60.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1707674"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="43243"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu60.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu61" name="core61">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2997146"/>
      <stat name="int_instructions" value="682911"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1424288"/>
      <stat name="store_instructions" value="1238528"/>
      <stat name="committed_instructions" value="2996497"/>
      <stat name="committed_int_instructions" value="682911"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.197175216265"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197128"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197128"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="682911"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="682911"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="662372"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20539"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu61.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu61.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu61.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3536064"/>
        <stat name="read_misses" value="311"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu61.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu61.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1684111"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="42864"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu61.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu62" name="core62">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2866241"/>
      <stat name="int_instructions" value="686512"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1314816"/>
      <stat name="store_instructions" value="1148416"/>
      <stat name="committed_instructions" value="2865733"/>
      <stat name="committed_int_instructions" value="686512"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.188568933762"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197270"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197270"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="686512"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="686512"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="664579"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="21933"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu62.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu62.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu62.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3392980"/>
        <stat name="read_misses" value="210"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu62.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu62.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1594129"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="40897"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu62.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.cpu63" name="core63">
      <!-- Core property -->
      <param name="clock_rate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="opt_local" value="0"/>
      <!-- for cores with unknown timing, set to 0 to force off the opt flag -->
      <param name="instruction_length" value="32"/>
      <param name="opcode_width" value="7"/>
      <!-- Effective number of opcode bits -->
      <param name="x86" value="0"/>
      <param name="micro_opcode_width" value="8"/>
      <param name="machine_type" value="1"/>
      <!-- inorder/OoO; 1 inorder; 0 OOO-->
      <param name="number_hardware_threads" value="1"/>
      <!-- number_instruction_fetch_ports(icache ports) is always 1 in single-thread processor,
	   it only may be more than one in SMT processors. BTB ports always equals to fetch ports since
	   branch information in consecutive branch instructions in the same fetch group can be read out from BTB once.-->
      <param name="fetch_width" value="1"/>
      <!-- fetch_width determines the size of cachelines of L1 cache block -->
      <param name="number_instruction_fetch_ports" value="1"/>
      <param name="decode_width" value="1"/>
      <!-- decode_width determines the number of ports of the
	   renaming table (both RAM and CAM) scheme -->
      <param name="issue_width" value="1"/>
      <param name="peak_issue_width" value="1"/>
      <!-- issue_width determines the number of ports of Issue window and other logic
	   as in the complexity effective processors paper; issue_width==dispatch_width -->
      <param name="commit_width" value="1"/>
      <!-- commit_width determines the number of ports of register files -->
      <param name="fp_issue_width" value="1"/>
      <param name="prediction_width" value="1"/>
      <!-- number of branch instructions can be predicted simultaneously-->
      <!-- Current version of McPAT does not distinguish int and floating point pipelines
	   Theses parameters are reserved for future use.-->
      <param name="pipelines_per_core" value="1,1"/>
      <!--integer_pipeline and floating_pipelines, if the floating_pipelines is 0, then the pipeline is shared-->
      <param name="pipeline_depth" value="5,5"/>
      <!-- pipeline depth of int and fp, if pipeline is shared, the second number is the average cycles of fp ops -->
      <!-- issue and exe unit-->
      <param name="ALU_per_core" value="1"/>
      <!-- contains an adder, a shifter, and a logical unit -->
      <param name="MUL_per_core" value="1"/>
      <!-- For MUL and Div -->
      <param name="FPU_per_core" value="1"/>
      <!-- buffer between IF and ID stage -->
      <param name="instruction_buffer_size" value="4"/>
      <!-- buffer between ID and sche/exe stage -->
      <param name="decoded_stream_buffer_size" value="4"/>
      <param name="instruction_window_scheme" value="0"/>
      <!-- 0 PHYREG based, 1 RSBASED-->
      <!-- McPAT support 2 types of OoO cores, RS based and physical reg based-->
      <param name="instruction_window_size" value="4"/>
      <param name="fp_instruction_window_size" value="4"/>
      <!-- the instruction issue Q as in Alpha 21264; The RS as in Intel P6 -->
      <param name="ROB_size" value="16"/>
      <!-- each in-flight instruction has an entry in ROB -->
      <!-- registers -->
      <param name="archi_Regs_IRF_size" value="16"/>
      <!-- X86-64 has 16GPR -->
      <param name="archi_Regs_FRF_size" value="16"/>
      <!-- MMX + XMM -->
      <!--  if OoO processor, phy_reg number is needed for renaming logic,
	   renaming logic is for both integer and floating point insts.  -->
      <param name="phy_Regs_IRF_size" value="16"/>
      <param name="phy_Regs_FRF_size" value="16"/>
      <!-- rename logic -->
      <param name="rename_scheme" value="0"/>
      <!-- can be RAM based(0) or CAM based(1) rename scheme
	   RAM-based scheme will have free list, status table;
	   CAM-based scheme have the valid bit in the data field of the CAM
	   both RAM and CAM need RAM-based checkpoint table, checkpoint_depth=# of in_flight instructions;
	   Detailed RAT Implementation see TR -->
      <param name="register_windows_size" value="0"/>
      <!-- how many windows in the windowed register file, sun processors;
	   no register windowing is used when this number is 0 -->
      <!-- In OoO cores, loads and stores can be issued whether inorder(Pentium Pro) or (OoO)out-of-order(Alpha),
	   They will always try to execute out-of-order though. -->
      <param name="LSU_order" value="inorder"/>
      <param name="store_buffer_size" value="4"/>
      <!-- By default, in-order cores do not have load buffers -->
      <param name="load_buffer_size" value="4"/>
      <!-- number of ports refer to sustain-able concurrent memory accesses -->
      <param name="memory_ports" value="1"/>
      <!-- max_allowed_in_flight_memo_instructions determines the # of ports of load and store buffer
	   as well as the ports of Dcache which is connected to LSU -->
      <!-- dual-pumped Dcache can be used to save the extra read/write ports -->
      <param name="RAS_size" value="16"/>
      <!-- general stats, defines simulation periods;require total, idle, and busy cycles for sanity check  -->
      <!-- please note: if target architecture is X86, then all the instructions refer to (fused) micro-ops -->
      <stat name="total_instructions" value="2852646"/>
      <stat name="int_instructions" value="697895"/>
      <stat name="fp_instructions" value="0"/>
      <stat name="branch_instructions" value="0"/>
      <stat name="branch_mispredictions" value="0"/>
      <stat name="load_instructions" value="1304480"/>
      <stat name="store_instructions" value="1132032"/>
      <stat name="committed_instructions" value="2852171"/>
      <stat name="committed_int_instructions" value="697895"/>
      <stat name="committed_fp_instructions" value="0"/>
      <stat name="pipeline_duty_cycle" value="0.187677845682"/>
      <!--<=1, runtime_ipc/peak_ipc; averaged for all cores if homogeneous -->
      <!-- the following cycle stats are used for heterogeneous cores only,
	   please ignore them if homogeneous cores -->
      <stat name="total_cycles" value="15197164"/>
      <stat name="idle_cycles" value="0"/>
      <stat name="busy_cycles" value="15197164"/>
      <!-- instruction buffer stats -->
      <!-- ROB stats, both RS and Phy based OoOs have ROB
	   performance simulator should capture the difference on accesses,
	   otherwise, McPAT has to guess based on number of committed instructions. -->
      <stat name="ROB_reads" value="0"/>
      <stat name="ROB_writes" value="0"/>
      <!-- RAT accesses -->
      <stat name="rename_reads" value="697895"/>
      <!--lookup in renaming logic -->
      <stat name="rename_writes" value="0"/>
      <!--update dest regs. renaming logic -->
      <stat name="fp_rename_reads" value="0"/>
      <stat name="fp_rename_writes" value="0"/>
      <!-- decode and rename stage use this, should be total ic - nop -->
      <!-- Inst window stats -->
      <stat name="inst_window_reads" value="697895"/>
      <stat name="inst_window_writes" value="0"/>
      <stat name="inst_window_wakeup_accesses" value="0"/>
      <stat name="fp_inst_window_reads" value="0"/>
      <stat name="fp_inst_window_writes" value="0"/>
      <stat name="fp_inst_window_wakeup_accesses" value="0"/>
      <!--  RF accesses -->
      <stat name="int_regfile_reads" value="0"/>
      <stat name="float_regfile_reads" value="0"/>
      <stat name="int_regfile_writes" value="0"/>
      <stat name="float_regfile_writes" value="0"/>
      <!-- accesses to the working reg -->
      <stat name="function_calls" value="0"/>
      <stat name="context_switches" value="0"/>
      <!-- Number of Windows switches (number of function calls and returns)-->
      <!-- Alu stats by default, the processor has one FPU that includes the divider and
	   multiplier. The fpu accesses should include accesses to multiplier and divider  -->
      <stat name="ialu_accesses" value="676953"/>
      <stat name="fpu_accesses" value="0"/>
      <stat name="mul_accesses" value="20942"/>
      <stat name="cdb_alu_accesses" value="0"/>
      <stat name="cdb_mul_accesses" value="0"/>
      <stat name="cdb_fpu_accesses" value="0"/>
      <!-- multiple cycle accesses should be counted multiple times,
	   otherwise, McPAT can use internal counter for different floating point instructions
	   to get final accesses. But that needs detailed info for floating point inst mix -->
      <!--  currently the performance simulator should
	   make sure all the numbers are final numbers,
	   including the explicit read/write accesses,
	   and the implicit accesses such as replacements and etc.
	   Future versions of McPAT may be able to reason the implicit access
	   based on param and stats of last level cache
	   The same rule applies to all cache access stats too!  -->
      <!-- following is AF for max power computation.
	   Do not change them, unless you understand them-->
      <stat name="IFU_duty_cycle" value="0.25"/>
      <!--depends on Icache line size and instruction issue rate -->
      <stat name="LSU_duty_cycle" value="0.25"/>
      <stat name="MemManU_I_duty_cycle" value="0.25"/>
      <stat name="MemManU_D_duty_cycle" value="0.25"/>
      <stat name="ALU_duty_cycle" value="1"/>
      <stat name="MUL_duty_cycle" value="0.3"/>
      <stat name="FPU_duty_cycle" value="0.3"/>
      <stat name="ALU_cdb_duty_cycle" value="1"/>
      <stat name="MUL_cdb_duty_cycle" value="0.3"/>
      <stat name="FPU_cdb_duty_cycle" value="0.3"/>
      <param name="number_of_BPT" value="2"/>
      <component id="system.cpu63.predictor" name="PBT">
        <!-- branch predictor; tournament predictor see Alpha implementation -->
        <param name="load_predictor" value="10,3,1024"/>
        <param name="global_predictor" value="4096,2"/>
        <param name="predictor_chooser" value="4096,2"/>
      </component>
      <component id="system.cpu63.itlb" name="itlb">
        <param name="number_entries" value="64"/>
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
        <!-- there is no write requests to itlb although writes happen to itlb after miss,
	     which is actually a replacement -->
      </component>
      <component id="system.cpu63.icache" name="icache">
        <!-- there is no write requests to itlb although writes happen to it after miss,
	     which is actually a replacement -->
        <param name="icache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy,  -->
        <!-- cache_policy;//0 no write or write-though with non-write allocate;1 write-back with write-allocate -->
        <param name="buffer_sizes" value="4, 4, 4,0"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="3381031"/>
        <stat name="read_misses" value="205"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu63.dtlb" name="dtlb">
        <param name="number_entries" value="64"/>
        <!--dual threads-->
        <stat name="total_accesses" value="0"/>
        <stat name="total_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <component id="system.cpu63.dcache" name="dcache">
        <!-- all the buffer related are optional -->
        <param name="dcache_config" value="4096, 64, 2, 1, 1, 1, 64, 1"/>
        <param name="buffer_sizes" value="4, 4, 4, 4"/>
        <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
        <stat name="read_accesses" value="1577815"/>
        <stat name="write_accesses" value="0"/>
        <stat name="read_misses" value="39997"/>
        <stat name="write_misses" value="0"/>
        <stat name="conflicts" value="0"/>
      </component>
      <param name="number_of_BTB" value="2"/>
      <component id="system.cpu63.BTB" name="BTB">
        <!-- all the buffer related are optional -->
        <param name="BTB_config" value="512,4,2,2,1,1"/>
        <!--should be 4096 + 1024 -->
        <!-- the parameters are capacity,block_width,associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
        <stat name="read_accesses" value="0"/>
        <!--See IFU code for guideline -->
        <stat name="write_accesses" value="0"/>
      </component>
    </component>
    <component id="system.L1Directory0" name="L1Directory0">
      <param name="Directory_type" value="0"/>
      <!--0 cam based shadowed tag. 1 directory cache -->
      <param name="Dir_config" value="4096,2,0,1,100,100, 8"/>
      <!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
      <param name="buffer_sizes" value="8, 8, 8, 8"/>
      <!-- all the buffer related are optional -->
      <param name="clockrate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="ports" value="1,1,1"/>
      <!-- number of r, w, and rw search ports -->
      <param name="device_type" value="0"/>
      <!-- although there are multiple access types,
	   Performance simulator needs to cast them into reads or writes
	   e.g. the invalidates can be considered as writes -->
      <stat name="read_accesses" value="0"/>
      <stat name="write_accesses" value="0"/>
      <stat name="read_misses" value="0"/>
      <stat name="write_misses" value="0"/>
      <stat name="conflicts" value="0"/>
    </component>
    <component id="system.L2Directory0" name="L2Directory0">
      <param name="Directory_type" value="1"/>
      <!--0 cam based shadowed tag. 1 directory cache -->
      <param name="Dir_config" value="1048576,16,16,1,2, 100"/>
      <!-- the parameters are capacity,block_width, associativity,bank, throughput w.r.t. core clock, latency w.r.t. core clock,-->
      <param name="buffer_sizes" value="8, 8, 8, 8"/>
      <!-- all the buffer related are optional -->
      <param name="clockrate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="ports" value="1,1,1"/>
      <!-- number of r, w, and rw search ports -->
      <param name="device_type" value="0"/>
      <!-- altough there are multiple access types,
	   Performance simulator needs to cast them into reads or writes
	   e.g. the invalidates can be considered as writes -->
      <stat name="read_accesses" value="0"/>
      <stat name="write_accesses" value="0"/>
      <stat name="read_misses" value="0"/>
      <stat name="write_misses" value="0"/>
      <stat name="conflicts" value="0"/>
    </component>
    <component id="system.L20" name="L20">
      <!-- all the buffer related are optional -->
      <param name="L2_config" value="1048576,32, 8, 8, 8, 23, 32, 1"/>
      <!-- the parameters are capacity,block_width, associativity, bank, throughput w.r.t. core clock, latency w.r.t. core clock,output_width, cache policy -->
      <param name="buffer_sizes" value="16, 16, 16, 16"/>
      <!-- cache controller buffer sizes: miss_buffer_size(MSHR),fill_buffer_size,prefetch_buffer_size,wb_buffer_size-->
      <param name="clockrate" value="1000"/>
      <param name="vdd" value="0"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="ports" value="1,1,1"/>
      <!-- number of r, w, and rw ports -->
      <param name="device_type" value="0"/>
      <stat name="read_accesses" value="0"/>
      <stat name="write_accesses" value="0"/>
      <stat name="read_misses" value="0"/>
      <stat name="write_misses" value="0"/>
      <stat name="conflicts" value="0"/>
      <stat name="duty_cycle" value="0"/>
    </component>
    <!-- TODO: NOC -->
    <component id="system.NoC0" name="noc0">
      <param name="clockrate" value="2000"/>
      <param name="type" value="0"/>
      <param name="horizontal_nodes" value="1"/>
      <param name="vertical_nodes" value="1"/>
      <param name="has_global_link" value="0"/>
      <param name="link_throughput" value="1"/>
      <param name="link_latency" value="1"/>
      <param name="input_ports" value="1"/>
      <param name="output_ports" value="1"/>
      <param name="flit_bits" value="64"/>
      <param name="chip_coverage" value="1"/>
      <param name="link_routing_over_percentage" value="0.5"/>
      <stat name="total_accesses" value="100000"/>
      <stat name="duty_cycle" value="0.2"/>
    </component>
    <!--**********************************************************************-->
    <component id="system.mc" name="mc">
      <!-- PARAMETERS TAKEN FROM DDR3 GEM5 -->
      <!-- current version of McPAT uses published values for base parameters of memory controller
	   improvements on MC will be added in later versions. -->
      <param name="type" value="1"/>
      <!-- 1: low power; 0 high performance -->
      <param name="mc_clock" value="1000"/>
      <!--DIMM IO bus clock rate MHz-->
      <param name="vdd" value="1.5"/>
      <!-- 0 means using ITRS default vdd -->
      <param name="peak_transfer_rate" value="3200"/>
      <!--MB/S-->
      <param name="block_size" value="64"/>
      <!--B-->
      <param name="number_mcs" value="1"/>
      <!-- current McPAT only supports homogeneous memory controllers -->
      <param name="memory_channels_per_mc" value="1"/>
      <param name="number_ranks" value="2"/>
      <param name="withPHY" value="0"/>
      <!-- # of ranks of each channel-->
      <param name="req_window_size_per_channel" value="32"/>
      <param name="IO_buffer_size_per_channel" value="32"/>
      <param name="databus_width" value="128"/>
      <param name="addressbus_width" value="51"/>
      <!-- McPAT will add the control bus width to the address bus width automatically -->
      <stat name="memory_accesses" value="0"/>
      <stat name="memory_reads" value="0"/>
      <stat name="memory_writes" value="0"/>
      <!-- McPAT does not track individual mc, instead, it takes the total accesses and calculate
	   the average power per MC or per channel. This is sufficient for most application.
	   Further track down can be easily added in later versions. -->
    </component>
    <!--**********************************************************************-->
    <component id="system.niu" name="niu">
      <param name="number_units" value="0"/>
    </component>
    <!--**********************************************************************-->
    <component id="system.pcie" name="pcie">
      <param name="number_units" value="0"/>
    </component>
    <!--**********************************************************************-->
    <component id="system.flashc" name="flashc">
      <param name="number_flashcs" value="0"/>
    </component>
    <!--**********************************************************************-->
  </component>
</component>
